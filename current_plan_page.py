import customtkinter as ctk
from CTkTable import *
from PIL import Image
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors
from datetime import datetime
import io
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from drills import Drill_manager

class Current_Plan_page(ctk.CTkFrame):

    #-------------------------------Generated by ChatGPT------------------------------------------------------------- 
    #--------------Please note the process of creating and saving as a pdf was formulated by AI.---------------------
    def download_and_save(self):
        if not hasattr(self, "current_plan") or not self.current_plan:
            messagebox.showerror("Error", "No training plan to save.")
            return
        #Opens filedialog and asks user where to save the PDF and under what name
        file_path = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if not file_path:
            return
        #Begins creating a canvas for the pdf
        try:
            c = canvas.Canvas(file_path, pagesize=A4)
            width, height = A4
            margin = 25
            y = height - margin
            table_col_widths = [50, 120, 250, 100]
            col_positions = [margin]
            for w in table_col_widths[:-1]:
                col_positions.append(col_positions[-1] + w + 10)
            #Function to wrap text keeping it inside column
            def draw_text_wrapped(c, text, x, y, max_width, font_name="Helvetica", font_size=10, leading=12):
                c.setFont(font_name, font_size)
                lines = []
                words = text.split()
                line = ""
                for word in words:
                    if c.stringWidth(line + " " + word, font_name, font_size) < max_width:
                        line += " " + word
                    else:
                        lines.append(line.strip())
                        line = word
                lines.append(line.strip())

                for line in lines:
                    c.drawString(x, y, line)
                    y -= leading
                return y

            #Header
            c.setFont("Helvetica-Bold", 16)
            #Add the current date to the training plan title (Not done with AI)
            current_date = datetime.today().strftime("%d/%m/%Y")
            c.drawString(margin, y, f"Training Plan - {current_date}")
            y -= 30
            #Column titles
            headers = self.current_plan[0]
            c.setFont("Helvetica-Bold", 12)
            for i, header in enumerate(headers):
                c.drawString(col_positions[i], y, header)
            y -= 20
            row_height = 120
            padding = 5
            for i, row in enumerate(self.current_plan[1:]):
                if y - row_height < margin:
                    c.showPage()
                    y = height - margin
                duration, name, description, diagram = row
                #Column positions
                x_time, x_name, x_desc, x_diag = col_positions

                #Draw vertical lines
                for x in [x_time, x_name, x_desc, x_diag, x_diag + table_col_widths[3]]:
                    c.line(x, y, x, y - row_height)
                #Draw horizontal line (bottom of row)
                c.line(margin, y - row_height, x_diag + table_col_widths[3], y - row_height)
                #Draw horizontal line (top of row)
                c.line(margin, y, x_diag + table_col_widths[3], y)

                #Text positions (with padding)
                c.setFont("Helvetica", 10)
                c.drawString(x_time + padding, y - 20, str(duration))
                c.drawString(x_name + padding, y - 20, name)
                #Wrap description text inside allotted box
                draw_text_wrapped(
                    c, description,
                    x_desc + padding, y - 20,
                    table_col_widths[2] - 2 * padding,
                    font_size=10,
                )

                #Draw image inline
                if isinstance(diagram, ctk.CTkImage):
                    try:
                        img = diagram._light_image  #PIL.Image
                        img_io = io.BytesIO()
                        img.save(img_io, format='PNG')
                        img_io.seek(0)
                        img_reader = ImageReader(img_io)
                        img_width = 80
                        img_height = 80
                        img_x = x_diag + padding
                        img_y = y - (row_height + img_height) // 2 + 10
                        c.drawImage(img_reader, img_x, img_y, width=img_width, height=img_height)
                    except Exception as e:
                        print("Failed to draw image:", e)
                #Move to next row
                y -= row_height

                #Adding a footer (Not using AI)
                c.setFont("Helvetica", 10)
                footer_text = "Generated using Stats2Drills - By Angus Morgan"
                footer_y = 25
                c.drawString(margin, footer_y, footer_text)

            c.save()
            messagebox.showinfo("Success", f"Your generated training plan has been saved as a pdf to {file_path}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save PDF:\n{e}")

            #------------------------------------End of ChatGPT written code---------------------------------------------------------------------------------------


    #Function to create and then display a training plan based on the analysis and team age passed from the stats_page.
    def generate_plan(self, team_age, analysis):
        plan_contents = [["Time", "Drill", "Description/POE", "Diagram"]]
        #Will keep track of drills added the plan
        added_drill_keys = set()

        for row in analysis[1:]: #Skips header row
            system_drill_search = row[0]  #Focus
            drill_search_number = row[1]  #Amount
            #Ensures system can search for either of the tags preventing error due to analysis having "Shooting & Offence"
            tags = [tag.strip() for tag in system_drill_search.split("&")]

            print(f"\nSearching for drills tagged '{system_drill_search}' for age group '{team_age}' (x{drill_search_number})")
            #Changes value to just integer eg("x3"-> 3)
            amount = int(drill_search_number.strip().lower().replace("x", ""))
            #Will keep track of amount of drills based off drill_search_number 
            added_drills = 0

            #Freethrows is a drill_name not a tage, so this is a special case kept separate from main loop
            if system_drill_search == "Freethrows":
                for drill in self.drill_manager.drills:
                    if drill.drill_name == "Freethrows":
                        drill_key = (drill.drill_name, drill.drill_description)
                        if drill_key not in added_drill_keys:
                            freethrows = [drill.drill_duration, drill.drill_name, drill.drill_description, "N/A"]
                            added_drill_keys.add(drill_key)
                            print("âœ… Found Freethrows drill")
                            break

            for drill in self.drill_manager.drills:
                #Checks for matching tag, will return true if at least one matches
                print(f"Checking drill: {drill.drill_name} (tags: {drill.drill_tags}, age: {drill.drill_age})")
                if any(tag in drill.drill_tags for tag in tags):
                    #Checks if drill also matches team_age
                    if team_age in drill.drill_age:
                        #Creates key to check for duplicates
                        drill_key = (drill.drill_name, drill.drill_description)
                        #Prevents same drill being added to list again
                        if drill_key not in added_drill_keys:
                            if drill.drill_diagram != "N/A":   #Turns each drill diagram into a CtkImage allowing it to be placed into the table
                                diagram = ctk.CTkImage(light_image=Image.open(drill.drill_diagram), dark_image=Image.open(drill.drill_diagram), size=(130, 130))
                            else:
                                diagram = "N/A"  #For Drills without a diagram ie. freethrows, they remain as N/A
                            drill_details = [drill.drill_duration, drill.drill_name, drill.drill_description, diagram]
                            print(f"Checking if drill already added: {drill.drill_name} (ID: {drill.drill_id})")
                            plan_contents.append(drill_details)
                            added_drills += 1
                            added_drill_keys.add(drill_key)
                        #Stops getting drills for that focus after specific amount is reached
                        if added_drills >= amount:
                            break
        total_time = 12 #starts at 12 to count offences and freethrows which is added last (after this runs)
        
        #Calulates total time for training plan
        for row in plan_contents[1:]:
            total_time += int(row[0])

        #Most represnetative trainng sessions go for 1hr 30 min, so session must be at least 90 min
        if total_time < 90:
            for drill in self.drill_manager.drills:
                if team_age in drill.drill_age:
                        drill_key = (drill.drill_name, drill.drill_description)
                        #Prevents same drill being added to list again
                        if drill_key not in added_drill_keys:
                            if drill.drill_diagram != "N/A":   #Turns each drill diagram into a CtkImage allowing it to be placed into the table
                                diagram = ctk.CTkImage(light_image=Image.open(drill.drill_diagram), dark_image=Image.open(drill.drill_diagram), size=(150, 150))
                            else:
                                diagram = "N/A"  #For Drills without a diagram ie. freethrows, they remain as N/A
                            drill_details = [drill.drill_duration, drill.drill_name, drill.drill_description, diagram]
                            plan_contents.append(drill_details)
                            added_drill_keys.add(drill_key)
                            total_time += int(drill.drill_duration)
                        #Prevents plan from going too far over timelimit.
                        if 90 <= total_time < 100:
                            break

        #Adds freethrows later in the plan. Players are most tired at this stage so best time to practice, as though in a game
        plan_contents.append(freethrows)
        #Offences always added last. Coaches practice whatever offences their team have, hence this is not a particular drill
        offences = [10, "Offences", "Work on your teams set offensive plays. Inlcuding your baseline and sideline out of bounds", "N/A"]
        plan_contents.append(offences)
        #Ensures it can be accessed and saved
        self.current_plan = plan_contents

        for widget in self.generated_training_plan.winfo_children():
            widget.destroy()
        #Creates a frame and label within it for each drill in training plam
        for i, drill in enumerate(self.current_plan):
            duration_frame = ctk.CTkFrame(self.generated_training_plan, corner_radius=0, border_width=3, border_color="black", fg_color="white")
            duration_frame.grid(row=i, column=0, pady=5, padx=3, sticky="nsew")
            duration_label = ctk.CTkLabel(duration_frame, text=drill[0], font=("Abadi", 14), justify="center")
            duration_label.pack(expand=True, fill="both")
            name_frame = ctk.CTkFrame(self.generated_training_plan, corner_radius=0,border_width=3, border_color="black", fg_color="white")
            name_frame.grid(row=i, column=1, pady=5, padx=3, sticky="nsew")
            name_label = ctk.CTkLabel(name_frame, text=drill[1], font=("Abadi", 15), justify="center")
            name_label.pack(expand=True, fill="both")
            description_frame = ctk.CTkFrame(self.generated_training_plan, corner_radius=0, border_width=3, border_color="black", fg_color="white")
            description_frame.grid(row=i, column=2, pady=5, padx=3, sticky="nsew")
            description_label = ctk.CTkLabel(description_frame, wraplength=250, justify="left", text=drill[2], font=("Abadi", 12))
            description_label.pack(expand=True, fill="both")
            #Returns true if object is a CTkImage
            if isinstance(drill[3], ctk.CTkImage):
                diagram_frame = ctk.CTkFrame(self.generated_training_plan, corner_radius=0, border_width=3, border_color="black", fg_color="white")
                diagram_label = ctk.CTkLabel(diagram_frame, image=drill[3], text="", justify="center")
            else:
                diagram_frame =  ctk.CTkFrame(self.generated_training_plan, corner_radius=0, border_width=3, border_color="black", fg_color="white")
                diagram_label = ctk.CTkLabel(diagram_frame, text=drill[3], justify="center")
            diagram_frame.grid(row=i, column=3, pady=5, padx=3, sticky="nsew")
            diagram_label.pack(expand=True, fill="both")
            #Changing style of header row 
            if i == 0:
                duration_frame.configure(fg_color="#e0e0e0")
                duration_label.configure(font=("Abadi", 16, "bold"))
                name_frame.configure(fg_color="#e0e0e0")
                name_label.configure(font=("Abadi", 16, "bold"))
                description_frame.configure(fg_color="#e0e0e0")
                description_label.configure(font=("Abadi", 16, "bold"))
                diagram_frame.configure(fg_color="#e0e0e0")
                diagram_label.configure(font=("Abadi", 16, "bold"))

        messagebox.showinfo("Success", "You have successfully generated a training plan")

    def __init__(self, parent, controller=None):
        super().__init__(parent)
        
        def edit_plan():
            #Creates a popup window for users to edit in
            edit_plan_popup = ctk.CTkToplevel(fg_color="#F2F2F2")
            edit_plan_popup.title("Edit generated training plan")
            edit_plan_popup.geometry("650x600")
            edit_plan_popup.transient(parent)  #Ensures the window opens up and remains above parent
            edit_plan_popup.grab_set()  #Prevents users from interacting with other windows
            edit_plan_popup.grid_columnconfigure(0, weight=1)
            edit_plan_popup.grid_columnconfigure(1, weight=1)
            edit_plan_popup.grid_columnconfigure(2, weight=1)
            edit_plan_popup.grid_rowconfigure(0, weight=1)
            #Dropdown menue with drill names for user to view and selected desired drill to add to plan
            drill_names = [drill.drill_name for drill in self.drill_manager.drills]
            drills_dropdown = ctk.CTkOptionMenu(edit_plan_popup, values=drill_names)
            drills_dropdown.grid(row=1, column=2)

            add_button = ctk.CTkButton(edit_plan_popup, text="Add drill to Training Plan")
            add_button.grid(row=2, column=2)

            #Loops through _____ skipping the header row
            for i, drill in enumerate(self.current_plan[1:], start=1):
                drill_label = ctk.CTkLabel(edit_plan_popup, text=f"{drill[1]} - {drill[0]} mins")
                drill_label.grid(row=i, column=0, pady=5, padx=5)

                delete_button = ctk.CTkButton(edit_plan_popup, text="Delete")
                delete_button.grid(row=i, column=1, paady=5, padx=5)

        self.show_frame = controller
        #Load Drill_manager
        self.drill_manager = Drill_manager()

        #Current Plan page content
        #Configure main grid
        self.grid_columnconfigure(0, weight=1) #Left column
        self.grid_columnconfigure(1, weight=1) #Right column
        self.grid_rowconfigure(0, weight=1)  #Main page content

        #Right Column, area to display generated training plan
        self.right_column = ctk.CTkFrame(self, bg_color="#F2F2F2", fg_color="#F2F2F2")
        self.right_column.grid(row=0, column=1, sticky="nsew")
        self.right_column.grid_propagate(True)
        self.right_column.grid_columnconfigure(0, weight=1)
        self.right_column.grid_rowconfigure(0, weight=0)

        #Scrollable frame to display generated plan
        self.generated_training_plan = ctk.CTkScrollableFrame(self.right_column, height=650, width=600, fg_color="white")
        self.generated_training_plan.grid(row=0, column=0, padx=5, sticky="nsew")

        #Left Column
        left_column = ctk.CTkFrame(self, bg_color="#F2F2F2", fg_color="#F2F2F2")
        left_column.grid(row=0, column=0, sticky="nsew")
        left_column.grid_columnconfigure(0, weight=1)
        left_column.grid_rowconfigure(0, weight=0)
        left_column.grid_rowconfigure(1, weight=1)
        left_column.grid_rowconfigure(2, weight=1)

        #Navigation bar. Appears only in top of left column allowing more space for training plan to be displayed
        navigation_bar = ctk.CTkFrame(left_column, height=35, bg_color="#00A29E", fg_color="#00A29E")
        navigation_bar.grid(row=0, column=0, sticky="ew")
        navigation_bar.grid_columnconfigure(0, weight=1)
        navigation_bar.grid_columnconfigure(1, weight=1)
        navigation_bar.grid_columnconfigure(2, weight=1)
        navigation_bar.grid_columnconfigure(3, weight=1)
        navigation_bar.grid_columnconfigure(4, weight=1)
        navigation_bar.grid_columnconfigure(5, weight=1)
        navigation_bar.grid_rowconfigure(0, weight=1)

        home_button = ctk.CTkButton(navigation_bar, width=120, height=40, text="Home", font=("ADLaM Display", 20), text_color="white", border_width=2, border_color="white", fg_color="#16CCCC", hover_color="#c7c7c7")
        home_button.grid(row=0, column=0, sticky="e")
        home_icon= ctk.CTkImage(light_image=Image.open("Images/white home icon.png"), dark_image=Image.open("Images/white home icon.png"), size=(35, 35))
        home_icon_button = ctk.CTkButton(navigation_bar, text="", image=home_icon, bg_color="#00A29E", fg_color="#00A29E", height=30, width=35, hover_color="#c7c7c7")
        home_icon_button.grid(row=0, column=1, sticky="w")
        #Configure buttons to display the home page
        home_button.configure(command=lambda: self.show_frame("Home_page"))
        home_icon_button.configure(command=lambda: self.show_frame("Home_page"))

        drills_button = ctk.CTkButton(navigation_bar, height=40, text="Drills", font=("ADLaM Display", 20), text_color="white", border_width=2, border_color="white", fg_color="#16CCCC", hover_color="#00A29E")
        drills_button.grid(row=0, column=2, sticky="e")
        drills_icon= ctk.CTkImage(light_image=Image.open("Images/white drills icon.png"), dark_image=Image.open("Images/white drills icon.png"), size=(35, 35))
        drills_icon_button = ctk.CTkButton(navigation_bar, text="", image=drills_icon, bg_color="#00A29E", fg_color="#00A29E",  height=30, width=35, hover_color="#00A29E")
        drills_icon_button.grid(row=0, column=3, sticky="w")
        #Configure buttons to display the drills page
        drills_button.configure(command=lambda: self.show_frame("Drills_page"))
        drills_icon_button.configure(command=lambda: self.show_frame("Drills_page"))

        previous_plans_button = ctk.CTkButton(navigation_bar, height=40, text="Previous Training Plans", font=("ADLaM Display", 20), text_color="white", border_width=2, border_color="white", fg_color="#16CCCC", hover_color="#c7c7c7")
        previous_plans_button.grid(row=0, column=4, sticky="e")
        file_icon= ctk.CTkImage(light_image=Image.open("Images/white file icon.png"), dark_image=Image.open("Images/white file icon.png"), size=(35, 35))
        file_icon_button = ctk.CTkButton(navigation_bar, text="", image=file_icon, bg_color="#00A29E", fg_color="#00A29E",  height=30, width=35, hover_color="#c7c7c7")
        file_icon_button.grid(row=0, column=5, sticky="w")
        #Configure buttons to display the previous plans page
        previous_plans_button.configure(command=lambda: self.show_frame("Previous_plans_page"))
        file_icon_button.configure(command=lambda: self.show_frame("Previous_plans_page"))

        #Row 1 - Left Column
        row_1 = ctk.CTkFrame(left_column, bg_color="#F2F2F2", fg_color="#F2F2F2")
        row_1.grid(row=1, column=0, sticky="ew")
        row_1.grid_columnconfigure(0, weight=1)
        row_1.grid_columnconfigure(1, weight=1)
        row_1.grid_rowconfigure(0, weight=1)

        save_icon = ctk.CTkImage(light_image=Image.open("Images/save icon.png"), dark_image=Image.open("Images/save icon.png"), size=(30, 30))
        save_button = ctk.CTkButton(row_1, corner_radius=10, text="Download and \nSave", font=("ADLaM Display", 25), text_color="white", height=50, fg_color="#FF7A53", hover_color="#c7c7c7", image=save_icon, compound="right", command=self.download_and_save)
        save_button.grid(row=0, column=0, padx=10, pady=10, sticky="")

        pencil_icon = ctk.CTkImage(light_image=Image.open("Images/pencil icon.png"), dark_image=Image.open("Images/pencil icon.png"), size=(30, 30))
        edit_button = ctk.CTkButton(row_1, corner_radius=10, text="Edit Training \nPlan", font=("ADLaM Display", 25), text_color="white", height=50, fg_color="#FF7A53", hover_color="#c7c7c7", image=pencil_icon, compound="right", command=edit_plan)
        edit_button.grid(row=0, column=1, padx=10, pady=10)

        instruction_label = ctk.CTkLabel(left_column, text="edit instrutions.....\n Once you are happy with your generated training plan, click the download and save button to conver the plan to a printable pdf file.", font=("Abadi", 16), text_color="black", wraplength=400, justify="center")
        instruction_label.grid(row=2, column=0, pady=5, padx=10, sticky="nsew")